/**
 * The <code>TableHandler</code> handles all the accesses to the AOServ tables.
 *
 * @author  AO Industries, Inc.
 */
final public class TableHandler {

    /**
     * The number of rows that will be loaded into each ResultSet for large tables.
     * This is done to get around the fact that the PostgreSQL JDBC loads all results
     * into the ResultSet, causing OutOfMemoryErrors on tables with millions of rows.
     */
    public static final int RESULT_SET_BATCH_SIZE=500;

    /**
     * The number of rows statements that should typically be used per update/insert/delete batch.
     */
    public static final int UPDATE_BATCH_SIZE=500;

    /**
     * The number of updates that will typically be done before the changes are committed.
     */
    public static final int BATCH_COMMIT_INTERVAL=500;

    /**
     * Gets one object from a table.
     */
    public static void getObject(
        DatabaseConnection conn,
        RequestSource source,
        CompressedDataInputStream in,
        CompressedDataOutputStream out,
        SchemaTable.TableID tableID
    ) throws IOException, SQLException {
        String username=source.getUsername();
        MasterUser masterUser=MasterServer.getMasterUser(conn, username);
        com.aoindustries.aoserv.client.MasterServer[] masterServers=masterUser==null?null:MasterServer.getMasterServers(conn, source.getUsername());
        switch(tableID) {
            case BANK_TRANSACTIONS :
                if(BankAccountHandler.isBankAccounting(conn, source)) {
                    MasterServer.writeObject(
                        conn,
                        source,
                        out,
                        "select\n"
                        + "  time::date,\n"
                        + "  transid,\n"
                        + "  bank_account,\n"
                        + "  processor,\n"
                        + "  administrator,\n"
                        + "  type,\n"
                        + "  expense_code,\n"
                        + "  description,\n"
                        + "  check_no,\n"
                        + "  amount,\n"
                        + "  confirmed\n"
                        + "from\n"
                        + "  bank_transactions\n"
                        + "where\n"
                        + "  transid=?",
                        in.readCompressedInt(),
                        new BankTransaction()
                    );
                } else out.writeByte(AOServProtocol.DONE);
                break;
            case SPAM_EMAIL_MESSAGES :
                {
                    int pkey=in.readCompressedInt();
                    if(masterUser!=null && masterServers.length==0) MasterServer.writeObject(
                        conn,
                        source,
                        out,
                        "select * from spam_email_messages where pkey=?",
                        pkey,
                        new SpamEmailMessage()
                    ); else throw new SQLException("Only master users may access spam_email_messages.");
                }
                break;
            default :
                throw new IOException("Unknown table ID: "+tableID);
        }
    }

    /**
     * Caches row counts for each table on a per-username basis.
     */
    private static final Map<String,int[]> rowCountsPerUsername=new HashMap<String,int[]>();
    private static final Map<String,long[]> expireTimesPerUsername=new HashMap<String,long[]>();

    private static final int MAX_ROW_COUNT_CACHE_AGE=60*60*1000;

    /** Copy used to avoid multiple array copies on each access. */
    private static final SchemaTable.TableID[] _tableIDs = SchemaTable.TableID.values();
    private static final int _numTables = _tableIDs.length;

    public static int getCachedRowCount(
        DatabaseConnection conn,
        RequestSource source,
        SchemaTable.TableID tableID
    ) throws IOException, SQLException {
        String username=source.getUsername();

        // Synchronize to get the correct objects
        int[] rowCounts;
        long[] expireTimes;
        synchronized(rowCountsPerUsername) {
            rowCounts=rowCountsPerUsername.get(username);
            if(rowCounts==null) {
                rowCountsPerUsername.put(username, rowCounts=new int[_numTables]);
                expireTimesPerUsername.put(username, expireTimes=new long[_numTables]);
            } else expireTimes=expireTimesPerUsername.get(username);
        }

        // Synchronize on the array to provide a per-user lock
        synchronized(rowCounts) {
            long expireTime=expireTimes[tableID.ordinal()];
            long startTime=System.currentTimeMillis();
            if(
                expireTime==0
                || expireTime<=startTime
                || expireTime>(startTime+MAX_ROW_COUNT_CACHE_AGE)
            ) {
                rowCounts[tableID.ordinal()]=getRowCount(
                    conn,
                    source,
                    tableID
                );
                expireTimes[tableID.ordinal()]=System.currentTimeMillis()+MAX_ROW_COUNT_CACHE_AGE;
            }

            return rowCounts[tableID.ordinal()];
        }
    }

    /**
     * Gets the number of accessible rows in a table.
     */
    public static int getRowCount(
        DatabaseConnection conn,
        RequestSource source,
        SchemaTable.TableID tableID
    ) throws IOException, SQLException {
        String username=source.getUsername();
        MasterUser masterUser=MasterServer.getMasterUser(conn, username);
        com.aoindustries.aoserv.client.MasterServer[] masterServers=masterUser==null?null:MasterServer.getMasterServers(conn, source.getUsername());
        switch(tableID) {
            case DISTRO_FILES :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        if(source.getProtocolVersion().compareTo(AOServProtocol.Version.VERSION_1_0_A_107)<=0) {
                            return 0;
                        } else {
                            return conn.executeIntQuery(
                                Connection.TRANSACTION_READ_COMMITTED,
                                true,
                                true,
                                "select count(*) from distro_files"
                            );
                        }
                    } else {
                        // Restrict to the operating system versions accessible to this user
                        IntList osVersions=getOperatingSystemVersions(conn, source);
                        if(osVersions.size()==0) return 0;
                        StringBuilder sql=new StringBuilder();
                        sql.append("select count(*) from distro_files where operating_system_version in (");
                        for(int c=0;c<osVersions.size();c++) {
                            if(c>0) sql.append(',');
                            sql.append(osVersions.getInt(c));
                        }
                        sql.append(')');
                        return conn.executeIntQuery(Connection.TRANSACTION_READ_COMMITTED, true, true, sql.toString());
                    }
                } else return 0;
            case TICKETS :
                if(source.getProtocolVersion().compareTo(AOServProtocol.Version.VERSION_1_43)<=0) return 0; // For backwards-compatibility only
                throw new IOException("Unknown table ID: "+tableID); // No longer used as of version 1.44
            default :
                throw new IOException("Unknown table ID: "+tableID);
        }
    }

    /**
     * Gets an entire table.
     */
    public static void getTable(
        DatabaseConnection conn,
        RequestSource source,
        CompressedDataInputStream in,
        CompressedDataOutputStream out,
        boolean provideProgress,
        final SchemaTable.TableID tableID
    ) throws IOException, SQLException {
        String username=source.getUsername();
        MasterUser masterUser=MasterServer.getMasterUser(conn, username);
        com.aoindustries.aoserv.client.MasterServer[] masterServers=masterUser==null?null:MasterServer.getMasterServers(conn, username);

        switch(tableID) {
            case AOSH_COMMANDS :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new AOSHCommand(),
                    "select\n"
                    + "  ac.*\n"
                    + "from\n"
                    + "  aoserv_protocols client_ap,\n"
                    + "  aosh_commands ac\n"
                    + "  inner join aoserv_protocols since_ap on ac.since_version=since_ap.version\n"
                    + "  left outer join aoserv_protocols last_ap on ac.last_version=last_ap.version\n"
                    + "where\n"
                    + "  client_ap.version=?\n"
                    + "  and client_ap.created>=since_ap.created\n"
                    + "  and (\n"
                    + "    last_ap.created is null\n"
                    + "    or client_ap.created<=last_ap.created\n"
                    + "  )",
                    source.getProtocolVersion().getVersion()
                );
                break;
            case BANK_ACCOUNTS :
                if(BankAccountHandler.isBankAccounting(conn, source)) {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BankAccount(),
                        "select * from bank_accounts"
                    );
                } else {
                    List<BankAccount> emptyList = Collections.emptyList();
                    MasterServer.writeObjects(source, out, provideProgress, emptyList);
                }
                break;
            case BANK_TRANSACTIONS :
                if(BankAccountHandler.isBankAccounting(conn, source)) {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BankTransaction(),
                        "select * from bank_transactions"
                    );
                } else {
                    List<BankTransaction> emptyList = Collections.emptyList();
                    MasterServer.writeObjects(source, out, provideProgress, emptyList);
                }
                break;
            case BANKS :
                if(BankAccountHandler.isBankAccounting(conn, source)) {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new Bank(),
                        "select * from banks"
                    );
                } else {
                    List<Bank> emptyList = Collections.emptyList();
                    MasterServer.writeObjects(source, out, provideProgress, emptyList);
                }
                break;
            case BLACKHOLE_EMAIL_ADDRESSES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BlackholeEmailAddress(),
                        "select * from blackhole_email_addresses"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BlackholeEmailAddress(),
                        "select\n"
                        + "  bh.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea,\n"
                        + "  blackhole_email_addresses bh\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain\n"
                        + "  and ea.pkey=bh.email_address",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new BlackholeEmailAddress(),
                    "select\n"
                    + "  bh.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea,\n"
                    + "  blackhole_email_addresses bh\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain\n"
                    + "  and ea.pkey=bh.email_address",
                    username
                );
                break;
            case BUSINESS_ADMINISTRATOR_PERMISSIONS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BusinessAdministratorPermission(),
                        "select * from business_administrator_permissions"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new BusinessAdministratorPermission(),
                        "select distinct\n"
                        + "  bp.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  business_servers bs,\n"
                        + "  usernames un,\n"
                        + "  business_administrator_permissions bp\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=bs.server\n"
                        + "  and bs.accounting=un.accounting\n"
                        + "  and un.username=bp.username",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new BusinessAdministratorPermission(),
                    "select\n"
                    + "  bp.*\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  usernames un2,\n"
                    + "  business_administrator_permissions bp\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + "    un2.username=un1.username\n"
                    + UN1_BU1_PARENTS_OR_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=un2.accounting\n"
                    + "  and un2.username=bp.username",
                    username
                );
                break;
            case CREDIT_CARD_PROCESSORS :
                if(BusinessHandler.hasPermission(conn, source, AOServPermission.Permission.get_credit_card_processors)) {
                    if(masterUser!=null) {
                        if(masterServers.length==0) MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new CreditCardProcessor(),
                            "select * from credit_card_processors"
                        ); else {
                            List<CreditCardProcessor> emptyList = Collections.emptyList();
                            MasterServer.writeObjects(source, out, provideProgress, emptyList);
                        }
                    } else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new CreditCardProcessor(),
                        "select\n"
                        + "  ccp.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  credit_card_processors ccp\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=ccp.accounting",
                        username
                    );
                } else {
                    // No permission, return empty list
                    List<CreditCardProcessor> emptyList = Collections.emptyList();
                    MasterServer.writeObjects(source, out, provideProgress, emptyList);
                }
                break;
            case DISTRO_FILE_TYPES :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new DistroFileType(),
                    "select * from distro_file_types"
                );
                break;
            case DISTRO_FILES :
                if(masterUser!=null && masterUser.isActive()) {
                    if(masterServers.length==0) {
                        if(provideProgress) throw new SQLException("Unable to provide progress when fetching rows for "+getTableName(conn, SchemaTable.TableID.DISTRO_FILES));
                        if(source.getProtocolVersion().compareTo(AOServProtocol.Version.VERSION_1_0_A_107)<=0) {
                            List<DistroFile> emptyList = Collections.emptyList();
                            MasterServer.writeObjects(source, out, false, emptyList);
                        } else {
                            MasterServer.fetchObjects(
                                conn,
                                source,
                                out, 
                                new DistroFile(),
                                "select * from distro_files"
                            );
                        }
                    } else {
                        // Restrict to the operating system versions accessible to this user
                        IntList osVersions=getOperatingSystemVersions(conn, source);
                        if(osVersions.size()==0) {
                            List<DistroFile> emptyList = Collections.emptyList();
                            MasterServer.writeObjects(source, out, provideProgress, emptyList);
                        } else {
                            if(provideProgress) throw new SQLException("Unable to provide progress when fetching rows for "+getTableName(conn, SchemaTable.TableID.DISTRO_FILES));
                            StringBuilder sql=new StringBuilder();
                            sql.append("select * from distro_files where operating_system_version in (");
                            for(int c=0;c<osVersions.size();c++) {
                                if(c>0) sql.append(',');
                                sql.append(osVersions.getInt(c));
                            }
                            sql.append(')');
                            MasterServer.fetchObjects(
                                conn,
                                source,
                                out, 
                                new DistroFile(),
                                sql.toString()
                            );
                        }
                    }
                } else {
                    List<DistroFile> emptyList = Collections.emptyList();
                    MasterServer.writeObjects(source, out, provideProgress, emptyList);
                }
                break;
            case DNS_FORBIDDEN_ZONES :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new DNSForbiddenZone(),
                    "select * from dns_forbidden_zones"
                );
                break;
            case EMAIL_ADDRESSES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailAddress(),
                        "select * from email_addresses"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailAddress(),
                        "select\n"
                        + "  ea.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailAddress(),
                    "select\n"
                    + "  ea.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain",
                    username
                );
                break;
            case EMAIL_ATTACHMENT_BLOCKS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailAttachmentBlock(),
                        "select * from email_attachment_blocks"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailAttachmentBlock(),
                        "select\n"
                        + "  eab.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  linux_server_accounts lsa,\n"
                        + "  email_attachment_blocks eab\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=lsa.ao_server\n"
                        + "  and lsa.pkey=eab.linux_server_account",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailAttachmentBlock(),
                    "select\n"
                    + "  eab.*\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  usernames un2,\n"
                    + "  linux_server_accounts lsa,\n"
                    + "  email_attachment_blocks eab\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + UN1_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=un2.accounting\n"
                    + "  and un2.username=lsa.username\n"
                    + "  and lsa.pkey=eab.linux_server_account",
                    username
                );
                break;
            case EMAIL_FORWARDING :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailForwarding(),
                        "select * from email_forwarding"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailForwarding(),
                        "select\n"
                        + "  ef.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea,\n"
                        + "  email_forwarding ef\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain\n"
                        + "  and ea.pkey=ef.email_address",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailForwarding(),
                    "select\n"
                    + "  ef.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea,\n"
                    + "  email_forwarding ef\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain\n"
                    + "  and ea.pkey=ef.email_address",
                    username
                );
                break;
            case EMAIL_LIST_ADDRESSES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailListAddress(),
                        "select * from email_list_addresses"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailListAddress(),
                        "select\n"
                        + "  ela.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea,\n"
                        + "  email_list_addresses ela\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain\n"
                        + "  and ea.pkey=ela.email_address",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailListAddress(),
                    "select\n"
                    + "  ela.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea,\n"
                    + "  email_list_addresses ela\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain\n"
                    + "  and ea.pkey=ela.email_address",
                    username
                );
                break;
            case EMAIL_LISTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailList(),
                        "select * from email_lists"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailList(),
                        "select\n"
                        + "  el.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  linux_server_groups lsg,\n"
                        + "  email_lists el\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=lsg.ao_server\n"
                        + "  and lsg.pkey=el.linux_server_group",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailList(),
                    "select\n"
                    + "  el.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  linux_groups lg,\n"
                    + "  linux_server_groups lsg,\n"
                    + "  email_lists el\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=lg.accounting\n"
                    + "  and lg.name=lsg.name\n"
                    + "  and lsg.pkey=el.linux_server_group",
                    username
                );
                break;
            case EMAIL_PIPE_ADDRESSES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailPipeAddress(),
                        "select * from email_pipe_addresses"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailPipeAddress(),
                        "select\n"
                        + "  epa.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea,\n"
                        + "  email_pipe_addresses epa\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain\n"
                        + "  and ea.pkey=epa.email_address",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailPipeAddress(),
                    "select\n"
                    + "  epa.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea,\n"
                    + "  email_pipe_addresses epa\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain\n"
                    + "  and ea.pkey=epa.email_address",
                    username
                );
                break;
            case EMAIL_PIPES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailPipe(),
                        "select * from email_pipes"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailPipe(),
                        "select\n"
                        + "  ep.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_pipes ep\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ep.ao_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailPipe(),
                    "select\n"
                    + "  ep.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_pipes ep\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ep.accounting",
                    username
                );
                break;
            case ENCRYPTION_KEYS :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new EncryptionKey(),
                            "select * from encryption_keys"
                        );
                    } else {
                        List<EncryptionKey> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EncryptionKey(),
                        "select\n"
                        + "  ek.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  encryption_keys ek\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=ek.accounting",
                        username
                    );
                }
                break;
            case HTTPD_BINDS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdBind(),
                        "select * from httpd_binds"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdBind(),
                        "select\n"
                        + "  hb.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  net_binds nb,\n"
                        + "  httpd_binds hb\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=nb.server\n"
                        + "  and nb.pkey=hb.net_bind",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdBind(),
                    "select\n"
                    + "  hb.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_site_binds hsb,\n"
                    + "  httpd_binds hb,\n"
                    + "  net_binds nb\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hsb.httpd_site\n"
                    + "  and hsb.httpd_bind=hb.net_bind\n"
                    + "  and hb.net_bind=nb.pkey\n"
                    + "group by\n"
                    + "  hb.net_bind,\n"
                    + "  hb.httpd_server,\n"
                    + "  nb.server,\n"
                    + "  nb.ip_address,\n"
                    + "  nb.port,\n"
                    + "  nb.net_protocol",
                    username
                );
                break;
            case HTTPD_JBOSS_SITES :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new HttpdJBossSite(),
                            "select * from httpd_jboss_sites"
                        );
                    } else {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new HttpdJBossSite(),
                            "select\n"
                            + "  hjs.*\n"
                            + "from\n"
                            + "  master_servers ms,\n"
                            + "  httpd_sites hs,\n"
                            + "  httpd_jboss_sites hjs\n"
                            + "where\n"
                            + "  ms.username=?\n"
                            + "  and ms.server=hs.ao_server\n"
                            + "  and hs.pkey=hjs.tomcat_site",
                            username
                        );
                    }
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdJBossSite(),
                    "select\n"
                    + "  hjs.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_jboss_sites hjs\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hjs.tomcat_site",
                    username
                );
                break;
            case HTTPD_SHARED_TOMCATS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSharedTomcat(),
                        "select * from httpd_shared_tomcats"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSharedTomcat(),
                        "select\n"
                        + "  hst.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_shared_tomcats hst\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hst.ao_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdSharedTomcat(),
                    "select\n"
                    + "  hst.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  linux_groups lg,\n"
                    + "  linux_server_groups lsg,\n"
                    + "  httpd_shared_tomcats hst\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=lg.accounting\n"
                    + "  and lg.name=lsg.name\n"
                    + "  and lsg.pkey=hst.linux_server_group",
                    username
                );
                break;
            case HTTPD_SITE_AUTHENTICATED_LOCATIONS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteAuthenticatedLocation(),
                        "select * from httpd_site_authenticated_locations"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteAuthenticatedLocation(),
                        "select\n"
                        + "  hsal.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_site_authenticated_locations hsal\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=hsal.httpd_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdSiteAuthenticatedLocation(),
                    "select\n"
                    + "  hsal.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_site_authenticated_locations hsal\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hsal.httpd_site",
                    username
                );
                break;
            case HTTPD_SITE_BINDS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteBind(),
                        "select * from httpd_site_binds"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteBind(),
                        "select\n"
                        + "  hsb.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_site_binds hsb\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=hsb.httpd_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdSiteBind(),
                    "select\n"
                    + "  hsb.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_site_binds hsb\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hsb.httpd_site",
                    username
                );
                break;
            case HTTPD_SITE_URLS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteURL(),
                        "select * from httpd_site_urls"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdSiteURL(),
                        "select\n"
                        + "  hsu.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_site_binds hsb,\n"
                        + "  httpd_site_urls hsu\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=hsb.httpd_site\n"
                        + "  and hsb.pkey=hsu.httpd_site_bind",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdSiteURL(),
                    "select\n"
                    + "  hsu.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_site_binds hsb,\n"
                    + "  httpd_site_urls hsu\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hsb.httpd_site\n"
                    + "  and hsb.pkey=hsu.httpd_site_bind",
                    username
                );
                break;
            case HTTPD_STATIC_SITES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdStaticSite(),
                        "select * from httpd_static_sites"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdStaticSite(),
                        "select\n"
                        + "  hss.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_static_sites hss\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=hss.httpd_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdStaticSite(),
                    "select\n"
                    + "  hss.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_static_sites hss\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hss.httpd_site",
                    username
                );
                break;
            case HTTPD_TOMCAT_CONTEXTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatContext(),
                        "select * from httpd_tomcat_contexts"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatContext(),
                        "select\n"
                        + "  htc.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_contexts htc\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=htc.tomcat_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatContext(),
                    "select\n"
                    + "  htc.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_contexts htc\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=htc.tomcat_site",
                    username
                );
                break;
            case HTTPD_TOMCAT_DATA_SOURCES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatDataSource(),
                        "select * from httpd_tomcat_data_sources"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatDataSource(),
                        "select\n"
                        + "  htds.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_contexts htc,\n"
                        + "  httpd_tomcat_data_sources htds\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=htc.tomcat_site\n"
                        + "  and htc.pkey=htds.tomcat_context",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatDataSource(),
                    "select\n"
                    + "  htds.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_contexts htc,\n"
                    + "  httpd_tomcat_data_sources htds\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=htc.tomcat_site\n"
                    + "  and htc.pkey=htds.tomcat_context",
                    username
                );
                break;
            case HTTPD_TOMCAT_PARAMETERS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatParameter(),
                        "select * from httpd_tomcat_parameters"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatParameter(),
                        "select\n"
                        + "  htp.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_contexts htc,\n"
                        + "  httpd_tomcat_parameters htp\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=htc.tomcat_site\n"
                        + "  and htc.pkey=htp.tomcat_context",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatParameter(),
                    "select\n"
                    + "  htp.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_contexts htc,\n"
                    + "  httpd_tomcat_parameters htp\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=htc.tomcat_site\n"
                    + "  and htc.pkey=htp.tomcat_context",
                    username
                );
                break;
            case HTTPD_TOMCAT_SITES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatSite(),
                        "select * from httpd_tomcat_sites"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatSite(),
                        "select\n"
                        + "  hts.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_sites hts\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=hts.httpd_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatSite(),
                    "select\n"
                    + "  hts.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_sites hts\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=hts.httpd_site",
                    username
                );
                break;
            case HTTPD_TOMCAT_SHARED_SITES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatSharedSite(),
                        "select * from httpd_tomcat_shared_sites"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatSharedSite(),
                        "select\n"
                        + "  htss.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_shared_sites htss\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=htss.tomcat_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatSharedSite(),
                    "select\n"
                    + "  htss.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_shared_sites htss\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=htss.tomcat_site",
                    username
                );
                break;
            case HTTPD_TOMCAT_STD_SITES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatStdSite(),
                        "select * from httpd_tomcat_std_sites"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdTomcatStdSite(),
                        "select\n"
                        + "  htss.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  httpd_sites hs,\n"
                        + "  httpd_tomcat_std_sites htss\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=hs.ao_server\n"
                        + "  and hs.pkey=htss.tomcat_site",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdTomcatStdSite(),
                    "select\n"
                    + "  htss.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  httpd_sites hs,\n"
                    + "  httpd_tomcat_std_sites htss\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=hs.accounting\n"
                    + "  and hs.pkey=htss.tomcat_site",
                    username
                );
                break;
            case HTTPD_WORKERS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdWorker(),
                        "select * from httpd_workers"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new HttpdWorker(),
                        "select\n"
                        + "  hw.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  net_binds nb,\n"
                        + "  httpd_workers hw\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=nb.server\n"
                        + "  and nb.pkey=hw.net_bind",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new HttpdWorker(),
                    "select\n"
                    + "  hw.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  net_binds nb,\n"
                    + "  httpd_workers hw\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=nb.accounting\n"
                    + "  and nb.pkey=hw.net_bind",
                    username
                );
                break;
            case LINUX_ACC_ADDRESSES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxAccAddress(),
                        "select * from linux_acc_addresses"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxAccAddress(),
                        "select\n"
                        + "  laa.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  email_addresses ea,\n"
                        + "  linux_acc_addresses laa\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ea.domain\n"
                        + "  and ea.pkey=laa.email_address",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new LinuxAccAddress(),
                    "select\n"
                    + "  laa.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  email_addresses ea,\n"
                    + "  linux_acc_addresses laa\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ea.domain\n"
                    + "  and ea.pkey=laa.email_address",
                    username
                );
                break;
            case LINUX_ACCOUNTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxAccount(),
                        "select * from linux_accounts"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxAccount(),
                        "select distinct\n"
                        + "  la.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  ao_servers ao\n"
                        + "  left join ao_servers ff on ao.server=ff.failover_server,\n"
                        + "  business_servers bs,\n"
                        + "  usernames un,\n"
                        + "  linux_accounts la\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ao.server\n"
                        + "  and (\n"
                        + "    ao.server=bs.server\n"
                        + "    or ff.server=bs.server\n"
                        + "  ) and bs.accounting=un.accounting\n"
                        + "  and un.username=la.username",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new LinuxAccount(),
                    "select\n"
                    + "  la.*\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  usernames un2,\n"
                    + "  linux_accounts la\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + "    un2.username='"+LinuxAccount.MAIL+"'\n"
                    + UN1_BU1_PARENTS_OR_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=un2.accounting\n"
                    + "  and un2.username=la.username",
                    username
                );
                break;
            case LINUX_GROUPS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxGroup(),
                        "select * from linux_groups"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxGroup(),
                        "select distinct\n"
                        + "  lg.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  ao_servers ao,\n"
                        + "  business_servers bs,\n"
                        + "  linux_groups lg\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ao.server\n"
                        + "  and ao.server=bs.server\n"
                        + "  and bs.accounting=lg.accounting",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new LinuxGroup(),
                    "select\n"
                    + "  lg.*\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  linux_groups lg\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + "    lg.name='"+LinuxGroup.FTPONLY+"'\n"
                    + "    or lg.name='"+LinuxGroup.MAIL+"'\n"
                    + "    or lg.name='"+LinuxGroup.MAILONLY+"'\n"
                    + UN1_BU1_PARENTS_OR_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=lg.accounting",
                    username
                );
                break;
            case LINUX_SERVER_ACCOUNTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxServerAccount(),
                        "select * from linux_server_accounts"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxServerAccount(),
                        "select distinct\n"
                        + "  lsa.*\n"
                        + "from\n"
                        + "  master_servers ms\n"
                        + "  left join ao_servers ff on ms.server=ff.failover_server,\n"
                        + "  linux_server_accounts lsa\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and (\n"
                        + "    ms.server=lsa.ao_server\n"
                        + "    or ff.server=lsa.ao_server\n"
                        + "  )",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new LinuxServerAccount(),
                    "select\n"
                    + "  lsa.pkey,\n"
                    + "  lsa.username,\n"
                    + "  lsa.ao_server,\n"
                    + "  lsa.uid,\n"
                    + "  lsa.home,\n"
                    + "  lsa.autoresponder_from,\n"
                    + "  lsa.autoresponder_subject,\n"
                    + "  lsa.autoresponder_path,\n"
                    + "  lsa.is_autoresponder_enabled,\n"
                    + "  lsa.disable_log,\n"
                    + "  case when lsa.predisable_password is null then null else '"+AOServProtocol.FILTERED+"' end,\n"
                    + "  lsa.created,\n"
                    + "  lsa.use_inbox,\n"
                    + "  lsa.trash_email_retention,\n"
                    + "  lsa.junk_email_retention,\n"
                    + "  lsa.sa_integration_mode,\n"
                    + "  lsa.sa_required_score,\n"
                    + "  lsa.sa_discard_score\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  usernames un2,\n"
                    + "  business_servers bs,\n"
                    + "  linux_server_accounts lsa\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + "    un2.username='"+LinuxAccount.MAIL+"'\n"
                    + UN1_BU1_PARENTS_OR_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=un2.accounting\n"
                    + "  and un1.accounting=bs.accounting\n"
                    + "  and un2.username=lsa.username\n"
                    + "  and bs.server=lsa.ao_server",
                    username
                );
                break;
            case LINUX_SERVER_GROUPS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxServerGroup(),
                        "select * from linux_server_groups"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new LinuxServerGroup(),
                        "select\n"
                        + "  lsg.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  linux_server_groups lsg\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=lsg.ao_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new LinuxServerGroup(),
                    "select\n"
                    + "  lsg.*\n"
                    + "from\n"
                    + "  usernames un1,\n"
                    + BU1_PARENTS_JOIN
                    + "  linux_groups lg,\n"
                    + "  business_servers bs,\n"
                    + "  linux_server_groups lsg\n"
                    + "where\n"
                    + "  un1.username=?\n"
                    + "  and (\n"
                    + "    lg.name='"+LinuxGroup.FTPONLY+"'\n"
                    + "    or lg.name='"+LinuxGroup.MAIL+"'\n"
                    + "    or lg.name='"+LinuxGroup.MAILONLY+"'\n"
                    + UN1_BU1_PARENTS_OR_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=lg.accounting\n"
                    + "  and lg.accounting=bs.accounting\n"
                    + "  and lg.name=lsg.name\n"
                    + "  and bs.server=lsg.ao_server",
                    username
                );
                break;
            case MAJORDOMO_LISTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new MajordomoList(),
                        "select * from majordomo_lists"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new MajordomoList(),
                        "select\n"
                        + "  ml.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  majordomo_lists ml\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=ml.majordomo_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new MajordomoList(),
                    "select\n"
                    + "  ml.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  majordomo_lists ml\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ml.majordomo_server",
                    username
                );
                break;
            case MAJORDOMO_SERVERS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new MajordomoServer(),
                        "select * from majordomo_servers"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new MajordomoServer(),
                        "select\n"
                        + "  mjs.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed,\n"
                        + "  majordomo_servers mjs\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server\n"
                        + "  and ed.pkey=mjs.domain",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new MajordomoServer(),
                    "select\n"
                    + "  ms.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed,\n"
                    + "  majordomo_servers ms\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting\n"
                    + "  and ed.pkey=ms.domain",
                    username
                );
                break;
            case MONTHLY_CHARGES :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new MonthlyCharge(),
                            "select * from monthly_charges"
                        );
                    } else {
                        List<MonthlyCharge> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else {
                    if(BusinessHandler.canSeePrices(conn, source)) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new MonthlyCharge(),
                            "select\n"
                            + "  mc.*\n"
                            + "from\n"
                            + "  usernames un,\n"
                            + BU1_PARENTS_JOIN
                            + "  monthly_charges mc\n"
                            + "where\n"
                            + "  un.username=?\n"
                            + "  and (\n"
                            + UN_BU1_PARENTS_WHERE
                            + "  )\n"
                            + "  and bu1.accounting=mc.source_accounting",
                            username
                        );
                    } else {
                        List<MonthlyCharge> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                }
                break;
            case NOTICE_LOG :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new NoticeLog(),
                        "select * from notice_log"
                    ); else {
                        List<NoticeLog> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new NoticeLog(),
                    "select\n"
                    + "  nl.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  notice_log nl\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=nl.accounting",
                    username
                );
                break;
            case PACKAGE_DEFINITION_LIMITS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PackageDefinitionLimit(),
                        "select * from package_definition_limits"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PackageDefinitionLimit(),
                        "select distinct\n"
                        + "  pdl.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  business_servers bs,\n"
                        + "  businesses bu,\n"
                        + "  package_definition_limits pdl\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=bs.server\n"
                        + "  and bs.accounting=bu.accounting\n"
                        + "  and bu.package_definition=pdl.package_definition",
                        username
                    );
                } else {
                    if(BusinessHandler.canSeePrices(conn, source)) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new PackageDefinitionLimit(),
                            "select distinct\n"
                            + "  pdl.*\n"
                            + "from\n"
                            + "  usernames un,\n"
                            + BU1_PARENTS_JOIN
                            + "  package_definitions pd,\n"
                            + "  package_definition_limits pdl\n"
                            + "where\n"
                            + "  un.username=?\n"
                            + "  and (\n"
                            + UN_BU1_PARENTS_WHERE
                            + "  )\n"
                            + "  and (\n"
                            + "    bu1.package_definition=pd.pkey\n"
                            + "    or bu1.accounting=pd.accounting\n"
                            + "  ) and pd.pkey=pdl.package_definition",
                            username
                        );
                    } else {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new PackageDefinitionLimit(),
                            "select distinct\n"
                            + "  pdl.pkey,\n"
                            + "  pdl.package_definition,\n"
                            + "  pdl.resource_type,\n"
                            + "  pdl.soft_limit,\n"
                            + "  pdl.hard_limit,\n"
                            + "  null,\n"
                            + "  null\n"
                            + "from\n"
                            + "  usernames un,\n"
                            + BU1_PARENTS_JOIN
                            + "  package_definitions pd,\n"
                            + "  package_definition_limits pdl\n"
                            + "where\n"
                            + "  un.username=?\n"
                            + "  and (\n"
                            + UN_BU1_PARENTS_WHERE
                            + "  )\n"
                            + "  and (\n"
                            + "    bu1.package_definition=pd.pkey\n"
                            + "    or bu1.accounting=pd.accounting\n"
                            + "  ) and pd.pkey=pdl.package_definition",
                            username
                        );
                    }
                }
                break;
            case PHYSICAL_SERVERS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PhysicalServer(),
                        "select * from physical_servers"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PhysicalServer(),
                        "select\n"
                        + "  ps.*\n"
                        + "from\n"
                        + "  master_servers ms\n"
                        + "  inner join physical_servers ps on ms.server=ps.server\n"
                        + "where\n"
                        + "  ms.username=?",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new PhysicalServer(),
                    "select distinct\n"
                    + "  ps.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + "  business_servers bs,\n"
                    // Allow servers it replicates to
                    //+ "  left join failover_file_replications ffr on bs.server=ffr.server\n"
                    //+ "  left join backup_partitions bp on ffr.backup_partition=bp.pkey,\n"
                    + "  physical_servers ps\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and un.accounting=bs.accounting\n"
                    + "  and (\n"
                    + "    bs.server=ps.server\n"
                    // Allow servers it replicates to
                    //+ "    or bp.ao_server=ps.server\n"
                    + "  )",
                    username
                );
                break;
            case RACKS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new Rack(),
                        "select * from racks"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PhysicalServer(),
                        "select distinct\n"
                        + "  ra.*\n"
                        + "from\n"
                        + "  master_servers ms\n"
                        + "  inner join physical_servers ps on ms.server=ps.server\n"
                        + "  inner join racks ra on ps.rack=ra.pkey\n"
                        + "where\n"
                        + "  ms.username=?",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new PhysicalServer(),
                    "select distinct\n"
                    + "  ra.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + "  business_servers bs,\n"
                    // Allow servers it replicates to
                    //+ "  left join failover_file_replications ffr on bs.server=ffr.server\n"
                    //+ "  left join backup_partitions bp on ffr.backup_partition=bp.pkey,\n"
                    + "  physical_servers ps,\n"
                    + "  racks ra\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and un.accounting=bs.accounting\n"
                    + "  and (\n"
                    + "    bs.server=ps.server\n"
                    // Allow servers it replicates to
                    //+ "    or bp.ao_server=ps.server\n"
                    + "  ) and ps.rack=ra.pkey",
                    username
                );
                break;
            case SCHEMA_COLUMNS :
                {
                    List<SchemaColumn> clientColumns=new ArrayList<SchemaColumn>();
                    PreparedStatement pstmt=conn.getConnection(Connection.TRANSACTION_READ_COMMITTED, true).prepareStatement(
                        "select\n"
                        + "  sc.*\n"
                        + "from\n"
                        + "  aoserv_protocols client_ap,\n"
                        + "  schema_columns sc\n"
                        + "  inner join aoserv_protocols sc_ap on sc.since_version=sc_ap.version\n"
                        + "  left join aoserv_protocols last_ap on sc.last_version=last_ap.version,\n"
                        + "  schema_tables st\n"
                        + "where\n"
                        + "  client_ap.version=?\n"
                        + "  and client_ap.created>=sc_ap.created\n"
                        + "  and (last_ap.created is null or client_ap.created<=last_ap.created)\n"
                        + "  and sc.table_name=st.name\n"
                        + "order by\n"
                        + "  st.table_id,\n"
                        + "  sc.index"
                    );
                    try {
                        pstmt.setString(1, source.getProtocolVersion().getVersion());

                        ResultSet results=pstmt.executeQuery();
                        try {
                            int clientColumnIndex=0;
                            String lastTableName=null;
                            SchemaColumn tempSC=new SchemaColumn();
                            while(results.next()) {
                                tempSC.init(results);
                                // Change the table ID if on next table
                                String tableName=tempSC.getSchemaTableName();
                                if(lastTableName==null || !lastTableName.equals(tableName)) {
                                    clientColumnIndex=0;
                                    lastTableName=tableName;
                                }
                                clientColumns.add(
                                    new SchemaColumn(
                                        tempSC.getPkey(),
                                        tableName,
                                        tempSC.getColumnName(),
                                        clientColumnIndex++,
                                        tempSC.getSchemaTypeName(),
                                        tempSC.isNullable(),
                                        tempSC.isUnique(),
                                        tempSC.isPublic(),
                                        tempSC.getDescription(),
                                        tempSC.getSinceVersion(),
                                        tempSC.getLastVersion()
                                    )
                                );
                            }
                        } finally {
                            results.close();
                        }
                    } catch(SQLException err) {
                        System.err.println("Error from query: "+pstmt.toString());
                        throw err;
                    } finally {
                        pstmt.close();
                    }
                    MasterServer.writeObjects(
                        source,
                        out,
                        provideProgress,
                        clientColumns
                    );
                }
                break;
            case SCHEMA_FOREIGN_KEYS :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new SchemaForeignKey(),
                    "select\n"
                    + "  sfk.*\n"
                    + "from\n"
                    + "  aoserv_protocols client_ap,\n"
                    + "  schema_foreign_keys sfk\n"
                    + "  inner join aoserv_protocols since_version on sfk.since_version=since_version.version\n"
                    + "  left join aoserv_protocols last_version on sfk.last_version=last_version.version\n"
                    + "where\n"
                    + "  client_ap.version=?\n"
                    + "  and client_ap.created>=since_version.created\n"
                    + "  and (last_version.created is null or client_ap.created<=last_version.created)",
                    source.getProtocolVersion().getVersion()
                );
                break;
            case SCHEMA_TABLES :
                {
                    List<SchemaTable> clientTables=new ArrayList<SchemaTable>();
                    PreparedStatement pstmt=conn.getConnection(Connection.TRANSACTION_READ_COMMITTED, true).prepareStatement(
                        "select\n"
                        + "  st.*\n"
                        + "from\n"
                        + "  aoserv_protocols client_ap,\n"
                        + "  schema_tables st\n"
                        + "  inner join aoserv_protocols since_version on st.since_version=since_version.version\n"
                        + "  left join aoserv_protocols last_version on st.last_version=last_version.version\n"
                        + "where\n"
                        + "  client_ap.version=?\n"
                        + "  and client_ap.created>=since_version.created\n"
                        + "  and (last_version.created is null or client_ap.created<=last_version.created)\n"
                        + "order by\n"
                        + "  st.table_id"
                    );
                    try {
                        pstmt.setString(1, source.getProtocolVersion().getVersion());

                        ResultSet results=pstmt.executeQuery();
                        try {
                            int clientTableID=0;
                            SchemaTable tempST=new SchemaTable();
                            while(results.next()) {
                                tempST.init(results);
                                clientTables.add(
                                    new SchemaTable(
                                        tempST.getName(),
                                        clientTableID++,
                                        tempST.getDisplay(),
                                        tempST.isPublic(),
                                        tempST.getDescription(),
                                        tempST.getSinceVersion(),
                                        tempST.getLastVersion()
                                    )
                                );
                            }
                        } finally {
                            results.close();
                        }
                    } catch(SQLException err) {
                        System.err.println("Error from query: "+pstmt.toString());
                        throw err;
                    } finally {
                        pstmt.close();
                    }
                    MasterServer.writeObjects(
                        source,
                        out,
                        provideProgress,
                        clientTables
                    );
                }
                break;
            case SCHEMA_TYPES :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new SchemaType(),
                    "select * from schema_types order by num"
                );
                break;
            case EMAIL_DOMAINS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailDomain(),
                        "select * from email_domains"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailDomain(),
                        "select\n"
                        + "  ed.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_domains ed\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=ed.ao_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailDomain(),
                    "select\n"
                    + "  ed.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_domains ed\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=ed.accounting",
                    username
                );
                break;
            case EMAIL_SMTP_RELAYS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpRelay(),
                        "select * from email_smtp_relays"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpRelay(),
                        "select distinct\n"
                        + "  esr.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  email_smtp_relays esr\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and (\n"
                        + "    esr.ao_server is null\n"
                        + "    or ms.server=esr.ao_server\n"
                        + "  )",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new EmailSmtpRelay(),
                    "select distinct\n"
                    + "  esr.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  email_smtp_relays esr\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and (\n"
                    + "    bu1.accounting=esr.accounting\n"
                    + "    or esr.ao_server is null\n"
                    + "  )",
                    username
                );
                break;
            case EMAIL_SMTP_SMART_HOST_DOMAINS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpSmartHostDomain(),
                        "select * from email_smtp_smart_host_domains"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpSmartHostDomain(),
                        "select\n"
                        + "  esshd.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  net_binds nb,\n"
                        + "  email_smtp_smart_host_domains esshd\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=nb.server\n"
                        + "  and nb.pkey=esshd.smart_host",
                        username
                    );
                } else {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PrivateFtpServer(),
                        "select\n"
                        + "  esshd.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  net_binds nb,\n"
                        + "  email_smtp_smart_host_domains esshd\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=nb.accounting\n"
                        + "  and nb.pkey=esshd.smart_host",
                        username
                    );
                }
                break;
            case EMAIL_SMTP_SMART_HOSTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpSmartHost(),
                        "select * from email_smtp_smart_hosts"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new EmailSmtpSmartHost(),
                        "select\n"
                        + "  essh.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  net_binds nb,\n"
                        + "  email_smtp_smart_hosts essh\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=nb.server\n"
                        + "  and nb.pkey=essh.net_bind",
                        username
                    );
                } else {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new PrivateFtpServer(),
                        "select\n"
                        + "  essh.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  net_binds nb,\n"
                        + "  email_smtp_smart_hosts essh\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=nb.accounting\n"
                        + "  and nb.pkey=essh.net_bind",
                        username
                    );
                }
                break;
            case SIGNUP_REQUEST_OPTIONS :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new SignupRequestOption(),
                            "select * from signup_request_options"
                        );
                    } else {
                        List<SignupRequestOption> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new SignupRequestOption(),
                        "select\n"
                        + "  sro.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  signup_requests sr,\n"
                        + "  signup_request_options sro\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=sr.brand\n"
                        + "  and sr.pkey=sro.request",
                        username
                    );
                }
                break;
            case SIGNUP_REQUESTS :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new SignupRequest(),
                            "select * from signup_requests"
                        );
                    } else {
                        List<SignupRequest> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else {
                    MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new SignupRequest(),
                        "select\n"
                        + "  sr.*\n"
                        + "from\n"
                        + "  usernames un,\n"
                        + BU1_PARENTS_JOIN
                        + "  signup_requests sr\n"
                        + "where\n"
                        + "  un.username=?\n"
                        + "  and (\n"
                        + UN_BU1_PARENTS_WHERE
                        + "  )\n"
                        + "  and bu1.accounting=sr.brand",
                        username
                    );
                }
                break;
            case SPAM_EMAIL_MESSAGES :
                if(masterUser!=null && masterServers.length==0) MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new SpamEmailMessage(),
                    "select * from spam_email_messages"
                ); else MasterServer.writeObjects(source, out, provideProgress, new ArrayList<AOServObject>());
                break;
            case SYSTEM_EMAIL_ALIASES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new SystemEmailAlias(),
                        "select * from system_email_aliases"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new SystemEmailAlias(),
                        "select\n"
                        + "  sea.*\n"
                        + "from\n"
                        + "  master_servers ms,\n"
                        + "  system_email_aliases sea\n"
                        + "where\n"
                        + "  ms.username=?\n"
                        + "  and ms.server=sea.ao_server",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new SystemEmailAlias(),
                    "select\n"
                    + "  sea.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + "  business_servers bs,\n"
                    + "  system_email_aliases sea\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and un.accounting=bs.accounting\n"
                    + "  and bs.server=sea.ao_server",
                    username
                );
                break;
            case TICKET_BRAND_CATEGORIES :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new TicketBrandCategory(),
                        "select * from ticket_brand_categories"
                    ); else {
                        List<TicketBrandCategory> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new TicketBrandCategory(),
                    "select\n"
                    + "  tbc.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  ticket_brand_categories tbc\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  ) and bu1.accounting=tbc.brand",
                    username
                );
                break;
            case US_STATES :
                MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new USState(),
                    "select * from us_states"
                );
                break;
            case VIRTUAL_DISKS :
                if(masterUser!=null) {
                    if(masterServers.length==0) MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new VirtualDisk(),
                        "select * from virtual_disks"
                    ); else MasterServer.writeObjects(
                        conn,
                        source,
                        out,
                        provideProgress,
                        new VirtualDisk(),
                        "select distinct\n"
                        + "  vd.*\n"
                        + "from\n"
                        + "  master_servers ms\n"
                        + "  inner join virtual_disks vd on ms.server=vd.virtual_server\n"
                        + "where\n"
                        + "  ms.username=?",
                        username
                    );
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new VirtualDisk(),
                    "select distinct\n"
                    + "  vd.*\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + "  business_servers bs,\n"
                    // Allow servers it replicates to
                    //+ "  left join failover_file_replications ffr on bs.server=ffr.server\n"
                    //+ "  left join backup_partitions bp on ffr.backup_partition=bp.pkey,\n"
                    + "  virtual_disks vd\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and un.accounting=bs.accounting\n"
                    + "  and (\n"
                    + "    bs.server=vd.virtual_server\n"
                    // Allow servers it replicates to
                    //+ "    or bp.ao_server=vd.virtual_server\n"
                    + "  )",
                    username
                );
                break;
            case WHOIS_HISTORY :
                if(masterUser!=null) {
                    if(masterServers.length==0) {
                        MasterServer.writeObjects(
                            conn,
                            source,
                            out,
                            provideProgress,
                            new WhoisHistory(),
                            "select pkey, time, accounting, zone from whois_history"
                        );
                    } else {
                        // The servers don't need access to this information
                        List<WhoisHistory> emptyList = Collections.emptyList();
                        MasterServer.writeObjects(source, out, provideProgress, emptyList);
                    }
                } else MasterServer.writeObjects(
                    conn,
                    source,
                    out,
                    provideProgress,
                    new WhoisHistory(),
                    "select\n"
                    + "  wh.pkey,\n"
                    + "  wh.time,\n"
                    + "  wh.accounting,\n"
                    + "  wh.zone\n"
                    + "from\n"
                    + "  usernames un,\n"
                    + BU1_PARENTS_JOIN
                    + "  whois_history wh\n"
                    + "where\n"
                    + "  un.username=?\n"
                    + "  and (\n"
                    + UN_BU1_PARENTS_WHERE
                    + "  )\n"
                    + "  and bu1.accounting=wh.accounting",
                    username
                );
                break;
            default :
                throw new IOException("Unknown table ID: "+tableID);
        }
    }

    public static void invalidate(
        DatabaseConnection conn,
        RequestSource source,
        InvalidateList invalidateList,
        SchemaTable.TableID tableID,
        int server
    ) throws SQLException, IOException {
        checkInvalidator(conn, source, "invalidate");
        invalidateList.addTable(
            conn,
            tableID,
            InvalidateList.allBusinesses,
            server==-1 ? InvalidateList.allServers : InvalidateList.getServerCollection(server),
            true
        );
    }

    public static void checkInvalidator(DatabaseConnection conn, RequestSource source, String action) throws IOException, SQLException {
        if(!isInvalidator(conn, source)) throw new SQLException("Table invalidation not allowed, '"+action+"'");
    }

    public static boolean isInvalidator(DatabaseConnection conn, RequestSource source) throws IOException, SQLException {
        MasterUser mu=MasterServer.getMasterUser(conn, source.getUsername());
        return mu!=null && mu.canInvalidateTables();
    }

    final private static Map<SchemaTable.TableID,String> tableNames=new EnumMap<SchemaTable.TableID,String>(SchemaTable.TableID.class);

    public static String getTableName(DatabaseAccess conn, SchemaTable.TableID tableID) throws IOException, SQLException {
        synchronized(tableNames) {
            String name=tableNames.get(tableID);
            if(name==null) {
                name=conn.executeStringQuery("select name from schema_tables where table_id=?", convertClientTableIDToDBTableID(conn, AOServProtocol.Version.CURRENT_VERSION, tableID.ordinal()));
                if(name==null) throw new NoSuchElementException("Unable to find table name for table ID: "+tableID);
                tableNames.put(tableID, name);
            }
            return name;
        }
    }

    final private static EnumMap<AOServProtocol.Version,Map<Integer,Integer>> fromClientTableIDs=new EnumMap<AOServProtocol.Version,Map<Integer,Integer>>(AOServProtocol.Version.class);

    /**
     * Converts a specific AOServProtocol version table ID to the number used in the database storage.
     */
    public static int convertClientTableIDToDBTableID(
        DatabaseAccess conn,
        AOServProtocol.Version version,
        int clientTableID
    ) throws IOException, SQLException {
        Map<Integer,Integer> tableIDs=fromClientTableIDs.get(version);
        if(tableIDs==null) {
            IntList clientTables=conn.executeIntListQuery(
                Connection.TRANSACTION_READ_COMMITTED,
                true,
                "select\n"
                + "  st.table_id\n"
                + "from\n"
                + "  aoserv_protocols client_ap,\n"
                + "  schema_tables st\n"
                + "  inner join aoserv_protocols since_version on st.since_version=since_version.version\n"
                + "  left join aoserv_protocols last_version on st.last_version=last_version.version\n"
                + "where\n"
                + "  client_ap.version=?\n"
                + "  and client_ap.created>=since_version.created\n"
                + "  and (last_version.created is null or client_ap.created<=last_version.created)\n"
                + "order by\n"
                + "  st.table_id",
                version.getVersion()
            );
            int numTables=clientTables.size();
            tableIDs=new HashMap<Integer,Integer>(numTables);
            for(int c=0;c<numTables;c++) {
                tableIDs.put(c, clientTables.getInt(c));
            }
            fromClientTableIDs.put(version, tableIDs);
        }
        Integer I=tableIDs.get(clientTableID);
        return I==null?-1:I.intValue();
    }

    final private static EnumMap<AOServProtocol.Version,Map<Integer,Integer>> toClientTableIDs=new EnumMap<AOServProtocol.Version,Map<Integer,Integer>>(AOServProtocol.Version.class);

    public static int convertDBTableIDToClientTableID(
        DatabaseConnection conn,
        AOServProtocol.Version version,
        int tableID
    ) throws IOException, SQLException {
        Map<Integer,Integer> clientTableIDs=toClientTableIDs.get(version);
        if(clientTableIDs==null) {
            IntList clientTables=conn.executeIntListQuery(
                Connection.TRANSACTION_READ_COMMITTED,
                true,
                "select\n"
                + "  st.table_id\n"
                + "from\n"
                + "  aoserv_protocols client_ap,\n"
                + "  schema_tables st\n"
                + "  inner join aoserv_protocols since_version on st.since_version=since_version.version\n"
                + "  left join aoserv_protocols last_version on st.last_version=last_version.version\n"
                + "where\n"
                + "  client_ap.version=?\n"
                + "  and client_ap.created>=since_version.created\n"
                + "  and (last_version.created is null or client_ap.created<=last_version.created)\n"
                + "order by\n"
                + "  st.table_id",
                version.getVersion()
            );
            int numTables=clientTables.size();
            clientTableIDs=new HashMap<Integer,Integer>(numTables);
            for(int c=0;c<numTables;c++) {
                clientTableIDs.put(clientTables.getInt(c), c);
            }
            toClientTableIDs.put(version, clientTableIDs);
        }
        Integer I=clientTableIDs.get(tableID);
        int clientTableID=I==null?-1:I.intValue();
        return clientTableID;
    }

    /**
     * Converts the client's AOServProtocol-version-specific table ID to the version used by the master's AOServProtocol version.
     *
     * @return  The <code>SchemaTable.TableID</code> or <code>null</code> if no match.
     */
    public static SchemaTable.TableID convertFromClientTableID(
        DatabaseConnection conn,
        RequestSource source,
        int clientTableID
    ) throws IOException, SQLException {
        int dbTableID=convertClientTableIDToDBTableID(conn, source.getProtocolVersion(), clientTableID);
        if(dbTableID==-1) return null;
        int tableID = convertDBTableIDToClientTableID(conn, AOServProtocol.Version.CURRENT_VERSION, dbTableID);
        if(tableID==-1) return null;
        return _tableIDs[tableID];
    }

    /**
     * Converts a local (Master AOServProtocol) table ID to a client-version matched table ID.
     */
    public static int convertToClientTableID(
        DatabaseConnection conn,
        RequestSource source,
        SchemaTable.TableID tableID
    ) throws IOException, SQLException {
        int dbTableID=convertClientTableIDToDBTableID(conn, AOServProtocol.Version.CURRENT_VERSION, tableID.ordinal());
        if(dbTableID==-1) return -1;
        return convertDBTableIDToClientTableID(conn, source.getProtocolVersion(), dbTableID);
    }

    final private static EnumMap<AOServProtocol.Version,Map<SchemaTable.TableID,Map<String,Integer>>> clientColumnIndexes=new EnumMap<AOServProtocol.Version,Map<SchemaTable.TableID,Map<String,Integer>>>(AOServProtocol.Version.class);

    public static int getClientColumnIndex(
        DatabaseConnection conn,
        RequestSource source,
        SchemaTable.TableID tableID,
        String columnName
    ) throws IOException, SQLException {
        // Get the list of resolved tables for the requested version
        AOServProtocol.Version version = source.getProtocolVersion();
        Map<SchemaTable.TableID,Map<String,Integer>> tables=clientColumnIndexes.get(version);
        if(tables==null) clientColumnIndexes.put(version, tables=new EnumMap<SchemaTable.TableID,Map<String,Integer>>(SchemaTable.TableID.class));

        // Find the list of columns for this table
        Map<String,Integer> columns=tables.get(tableID);
        if(columns==null) {
            List<String> clientColumns=conn.executeStringListQuery(
                Connection.TRANSACTION_READ_COMMITTED,
                true,
                "select\n"
                + "  sc.column_name\n"
                + "from\n"
                + "  aoserv_protocols client_ap,\n"
                + "  schema_columns sc\n"
                + "  inner join aoserv_protocols since_version on sc.since_version=since_version.version\n"
                + "  left join aoserv_protocols last_version on sc.last_version=last_version.version\n"
                + "where\n"
                + "  client_ap.version=?\n"
                + "  and client_ap.created>=since_version.created\n"
                + "  and (last_version.created is null or client_ap.created<=last_version.created)\n"
                + "order by\n"
                + "  sc.index",
                version.getVersion()
            );
            int numColumns=clientColumns.size();
            columns=new HashMap<String,Integer>(numColumns);
            for(int c=0;c<numColumns;c++) {
                columns.put(clientColumns.get(c), Integer.valueOf(c));
            }
            tables.put(tableID, columns);
        }

        // Return the column or -1 if not found
        Integer columnIndex=columns.get(columnName);
        return columnIndex==null?-1:columnIndex.intValue();
    }

    public static void invalidateTable(SchemaTable.TableID tableID) {
        if(tableID==SchemaTable.TableID.SCHEMA_TABLES) {
            synchronized(tableNames) {
                tableNames.clear();
            }
        }
        if(tableID==SchemaTable.TableID.AOSERV_PROTOCOLS || tableID==SchemaTable.TableID.SCHEMA_TABLES) {
            synchronized(fromClientTableIDs) {
                fromClientTableIDs.clear();
            }
            synchronized(toClientTableIDs) {
                toClientTableIDs.clear();
            }
        }
        if(tableID==SchemaTable.TableID.AOSERV_PROTOCOLS || tableID==SchemaTable.TableID.SCHEMA_COLUMNS) {
            synchronized(clientColumnIndexes) {
                clientColumnIndexes.clear();
            }
        }
    }
    
    public static IntList getOperatingSystemVersions(DatabaseConnection conn, RequestSource source) throws IOException, SQLException {
        return conn.executeIntListQuery(
            Connection.TRANSACTION_READ_COMMITTED,
            true,
            "select distinct\n"
            + "  se.operating_system_version\n"
            + "from\n"
            + "  master_servers ms,\n"
            + "  ao_servers ao,\n"
            + "  servers se,\n"
            + "  operating_system_versions osv\n"
            + "where\n"
            + "  ms.username=?\n"
            + "  and ms.server=ao.server\n"
            + "  and ao.server=se.pkey\n"
            + "  and se.operating_system_version=osv.pkey\n"
            + "  and osv.is_aoserv_daemon_supported",
            source.getUsername()
        );
    }
}